[
  {
    "objectID": "ipynb2website.html",
    "href": "ipynb2website.html",
    "title": "ipynb から ウェブサイトをビルドし、GitHub Pagesとして公開する",
    "section": "",
    "text": "ここでは ipynb をクロスリファレンスを備えた PDF や WORD に出力するだけではなく、 ウェブサイトとして公開する方法を示します。\nまず PDF や WORD の場合と異なり、ipynb からウェブサイトをビルドすることはできません。 いったん ipynb を qmd という Markdown ファイルに置き換える必要があります。\nそれは下記の quarto コマンドにて行うことができます。\n上記で ipynb から qmd への変換ができました。"
  },
  {
    "objectID": "ipynb2website.html#qmd-の-yaml-front-matter-から-pdf-レンダリング用の設定を削除する",
    "href": "ipynb2website.html#qmd-の-yaml-front-matter-から-pdf-レンダリング用の設定を削除する",
    "title": "ipynb から ウェブサイトをビルドし、GitHub Pagesとして公開する",
    "section": "qmd の YAML front matter から PDF レンダリング用の設定を削除する",
    "text": "qmd の YAML front matter から PDF レンダリング用の設定を削除する\nここでの目的は「PDF を作ること」ではなく「ウェブサイトを作ること」なので、 下記の設定は先程作ったすべての qmd の YAML front matter から削除します。\nformat: \n  pdf:\n    toc: true\n    number-sections: true\n    documentclass: bxjsarticle\n    classoption:\n      - pandoc\n      - ja=standard\n      - jafont=haranoaji\npdf-engine: lualatex"
  },
  {
    "objectID": "ipynb2website.html#qmd-をウェブサイトにビルドする",
    "href": "ipynb2website.html#qmd-をウェブサイトにビルドする",
    "title": "ipynb から ウェブサイトをビルドし、GitHub Pagesとして公開する",
    "section": "qmd をウェブサイトにビルドする",
    "text": "qmd をウェブサイトにビルドする\nqmd をウェブサイトとしてビルドするには、設定ファイル _quarto.yml を作ることが必要になります。\n簡単なウェブサイトとして下記の _quarto.yml を作ります。\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"quarto4rubydata\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - ipynb2pdforword.qmd\n      - crossref4figtbl.qmd\n      - ipynb2website.qmd\n\nformat:\n  html\n    theme: cosmo\n    css: style.css\n    toc: true    \n上記の yml を作った上で quarto render コマンドを実行すると、そのコマンドを実行したディレクトリ下に docs というディレクトリが作られ、 その中にウェブサイトがビルドされます。\nあとはこの docs ディレクトリ以下を GitHub Pages なりにデプロイすれば、 下記のワークフローによる知識共有が実現できます。\n\n\n\nQuarto によって実現される知識共有のワークフロー"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RubyDataをQuartoと組み合わせて用いる方法と意義",
    "section": "",
    "text": "このウェブサイトでは RubyData エコシステムで Quarto を「用いる方法」と、「用いるとどのような利点があるのか？」を説明します。\n以下では Windows と PowerShell の最新バージョンを用いることを想定しています。"
  },
  {
    "objectID": "index.html#quarto-を使うには",
    "href": "index.html#quarto-を使うには",
    "title": "RubyDataをQuartoと組み合わせて用いる方法と意義",
    "section": "Quarto を使うには",
    "text": "Quarto を使うには\nQuarto は、この JupyterLab 内のターミナルから quarto コマンドを実行することで利用できます。\nJupyterLab でターミナルを使うには下記画像の赤丸をクリックします。\n\n\n\nターミナルを立ち上げる\n\n\nあとはターミナル内で quarto --help コマンドを実行し、quarto コマンドが利用できることを確認しましょう。\n\n\n\nimage.png"
  },
  {
    "objectID": "crossref4figtbl.html",
    "href": "crossref4figtbl.html",
    "title": "コード実行により得られる図表に対するクロスリファレンス",
    "section": "",
    "text": "このページでは matplotlib.rb で生成される図に対するクロスリファレンスが、 Quarto を用いることで自動的に得られることを示します。\nまず matplotlib.rb の画像出力を iruby notebook でインタラクティブに確認するための、下記コードセルを実行します。\n\nrequire 'matplotlib/iruby'\nMatplotlib::IRuby.activate\n\n[:inline, \"module://matplotlib_rb.backend_inline\"]\n\n\n次に、「図」用クロスリファレンスのためのコードセルの記述方法を示します。 何はともあれ下記のセルを実行しましょう。\nウェブサイトでは Jupyter のコードセル内の Quarto 用のコメントが表示されなかったため、 Markdown のコードブロックと Jupyter のコードセルを併記します。 ご注意ください。\n#| label: fig-plot\n#| fig-cap: \"matplotlib.rbを用いたプロット\"\n\nrequire 'matplotlib/pyplot'\nplt = Matplotlib::Pyplot\n\nxs = [*1..100].map {|x| (x - 50) * Math::PI / 100.0 }\nys = xs.map {|x| Math.sin(x) }\n\nplt.plot(xs, ys)\nplt.show()\n\nrequire 'matplotlib/pyplot'\nplt = Matplotlib::Pyplot\n\nxs = [*1..100].map {|x| (x - 50) * Math::PI / 100.0 }\nys = xs.map {|x| Math.sin(x) }\n\nplt.plot(xs, ys)\nplt.show()\n\n\n\n\n図 1: matplotlib.rbを用いたプロット\n\n\n\n\nsinカーブを描く図がノートブックの出力セルに得られたはずです。 そして先のコードセルの冒頭のコメント2行\n#| label: fig-plot\n#| fig-cap: \"matplotlib.rbを用いたプロット\"\nは、この図に対してクロスリファレンスを作るための記法です。\n#| label: fig-XXX のようなコメントを図を出力するコードセルに書くと、 その図に対するラベル fig-XXX が設定されます。XXXは任意の文字列です。\nそして、#| fig-cap: \"YYY\" のようなコメントを図を出力するコードセルに書くと、 その図に対するキャプションが (その ipynb を Quarto に与えた出力結果では) 得られます。\nそれではセクションや数式に対するクロスリファレンスと同様、 図に対するクロスリファレンスを参照してみましょう。\n参照する方法は「@fig-XXX を Markdown セル中に書く」です。\nではこのノートブックの quarto render の結果で Figure 1 がどうなっているか見てみましょう。\nノートブックでは @fig-plot と表示されていが箇所が PDF 等では図へのクロスリファレンスにはなっているはずです。\n\n\n図表のキャプションのタイトル冒頭の文字列はデフォルトでは Figure 数字インデックス: と Table 数字インデックス: になっていますが、Figure や Table を任意の日本語に置き換えることもできます。\nそれを行ったのがこのノートブックの冒頭の、Raw セル (Raw セルは ipynb が GitHub 等でレンダリングされる結果には表示されないのでご注意ください) になります。\nその Raw セルを下記に Markdown として再掲します。\n---\ntitle: \"コード実行により得られる図表に対するクロスリファレンス\"\ncrossref:\n  fig-title: 図     # (default is \"Figure\")\n  tbl-title: 表     # (default is \"Table\")\nformat: \n  pdf:\n    toc: true\n    number-sections: true\n    documentclass: bxjsarticle\n    classoption:\n      - pandoc\n      - ja=standard\n      - jafont=haranoaji\npdf-engine: lualatex\njupyter: ruby\n---\nご推測の通り、\ncrossref:\n  fig-title: 図     # (default is \"Figure\")\n  tbl-title: 表     # (default is \"Table\")\nが前述のカスタマイズを行っている箇所になります。\nではキャプションの日本語カスタマイズだけではなく、クロスリファレンス側での日本語カスタマイズも行ってみましょう。 それは [図 @fig-plot] を Markdown セルに書くことで実現できます。\nでは 図 1 を参照してみましょう。\nどうでしょう？ このノートブックを Quarto への入力として与え、出力として得られる PDF 等では上記がクロスリファレンスに置き換えられているはずです。\n\n\n\n図と同様、表に対してもクロスリファレンスを得ることができます。\n図ではラベルやキャプションで fig- と書いていた箇所を tbl- と置き換えることでそれが実現できます。\nと言っても「“表” はどういったコードセルによって得られるのか？」と思われるでしょう。\nそれは「Markdown のテーブル記法」を mime type を markdown として出力することによって実現できます。\nまずはとてもシンプルな例を見てみましょう。 下記のコードセルがそれになります。\n\nIRuby.convert(\"| TH1 | TH2 |\\n| ---- | ---- |\\n| TD | TD |\", mime: \"text/markdown\")\n\n\n\n表 1: Planets for 日本語\n\n\nTH1\nTH2\n\n\n\n\nTD\nTD\n\n\n\n\n\n\nでは @tbl-planets を下記のように Markdown セルに書いたこの ipynb を quarto render コマンドに与えて得られる PDF 等を見てみましょう。\nTable 1 はどうなっているでしょうか？\n\n\n\nred_amber は Ruby における pandas と言える gem です。\n下記では red_amber を用いて、より実践的な 表作成用 Ruby コードセルを示します。\n\nrequire 'terminal-table'\nrequire 'red_amber'\ninclude RedAmber\nuri = URI('https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/starwars.csv')\nstarwars = DataFrame.load(uri)\ntable = Terminal::Table.new do |t|\n  t.headings = starwars.keys.map { |x| x.to_s }\n  t.rows = starwars.head.to_a\n  t.style = { :border_top =&gt; false, :border_bottom =&gt; false }\nend\ntable.style = { :border =&gt; :markdown}\n\nIRuby.convert(table.render, mime: \"text/markdown\")\n\n\n\n表 2: StarWars table for 日本\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nunnamed1\nname\nheight\nmass\nhair_color\nskin_color\neye_color\nbirth_year\nsex\ngender\nhomeworld\nspecies\n\n\n\n\n1\nLuke Skywalker\n172\n77.0\nblond\nfair\nblue\n19.0\nmale\nmasculine\nTatooine\nHuman\n\n\n2\nC-3PO\n167\n75.0\nNA\ngold\nyellow\n112.0\nnone\nmasculine\nTatooine\nDroid\n\n\n3\nR2-D2\n96\n32.0\nNA\nwhite, blue\nred\n33.0\nnone\nmasculine\nNaboo\nDroid\n\n\n4\nDarth Vader\n202\n136.0\nnone\nwhite\nyellow\n41.9\nmale\nmasculine\nTatooine\nHuman\n\n\n5\nLeia Organa\n150\n49.0\nbrown\nlight\nbrown\n19.0\nfemale\nfeminine\nAlderaan\nHuman\n\n\n\n\n\n\nでは [表 @tbl-starwars] によってクロスリファレンスを得てみましょう。\nスターウォーズの研究は 表 2 を参照。\nいかがでしょうか？ この ipynb を quarto render した結果得られる PDF 等では [表 @tbl-starwars] がクロスリファレンスに置き換えられているはずです。"
  },
  {
    "objectID": "crossref4figtbl.html#キャプションのタイトルを英語から日本語にカスタマイズしたい場合",
    "href": "crossref4figtbl.html#キャプションのタイトルを英語から日本語にカスタマイズしたい場合",
    "title": "コード実行により得られる図表に対するクロスリファレンス",
    "section": "",
    "text": "図表のキャプションのタイトル冒頭の文字列はデフォルトでは Figure 数字インデックス: と Table 数字インデックス: になっていますが、Figure や Table を任意の日本語に置き換えることもできます。\nそれを行ったのがこのノートブックの冒頭の、Raw セル (Raw セルは ipynb が GitHub 等でレンダリングされる結果には表示されないのでご注意ください) になります。\nその Raw セルを下記に Markdown として再掲します。\n---\ntitle: \"コード実行により得られる図表に対するクロスリファレンス\"\ncrossref:\n  fig-title: 図     # (default is \"Figure\")\n  tbl-title: 表     # (default is \"Table\")\nformat: \n  pdf:\n    toc: true\n    number-sections: true\n    documentclass: bxjsarticle\n    classoption:\n      - pandoc\n      - ja=standard\n      - jafont=haranoaji\npdf-engine: lualatex\njupyter: ruby\n---\nご推測の通り、\ncrossref:\n  fig-title: 図     # (default is \"Figure\")\n  tbl-title: 表     # (default is \"Table\")\nが前述のカスタマイズを行っている箇所になります。\nではキャプションの日本語カスタマイズだけではなく、クロスリファレンス側での日本語カスタマイズも行ってみましょう。 それは [図 @fig-plot] を Markdown セルに書くことで実現できます。\nでは 図 1 を参照してみましょう。\nどうでしょう？ このノートブックを Quarto への入力として与え、出力として得られる PDF 等では上記がクロスリファレンスに置き換えられているはずです。"
  },
  {
    "objectID": "crossref4figtbl.html#図と同様表に対してもクロスリファレンスを得る",
    "href": "crossref4figtbl.html#図と同様表に対してもクロスリファレンスを得る",
    "title": "コード実行により得られる図表に対するクロスリファレンス",
    "section": "",
    "text": "図と同様、表に対してもクロスリファレンスを得ることができます。\n図ではラベルやキャプションで fig- と書いていた箇所を tbl- と置き換えることでそれが実現できます。\nと言っても「“表” はどういったコードセルによって得られるのか？」と思われるでしょう。\nそれは「Markdown のテーブル記法」を mime type を markdown として出力することによって実現できます。\nまずはとてもシンプルな例を見てみましょう。 下記のコードセルがそれになります。\n\nIRuby.convert(\"| TH1 | TH2 |\\n| ---- | ---- |\\n| TD | TD |\", mime: \"text/markdown\")\n\n\n\n表 1: Planets for 日本語\n\n\nTH1\nTH2\n\n\n\n\nTD\nTD\n\n\n\n\n\n\nでは @tbl-planets を下記のように Markdown セルに書いたこの ipynb を quarto render コマンドに与えて得られる PDF 等を見てみましょう。\nTable 1 はどうなっているでしょうか？"
  },
  {
    "objectID": "crossref4figtbl.html#red_amber-gem-を用いた表の作成するコードセルの実例",
    "href": "crossref4figtbl.html#red_amber-gem-を用いた表の作成するコードセルの実例",
    "title": "コード実行により得られる図表に対するクロスリファレンス",
    "section": "",
    "text": "red_amber は Ruby における pandas と言える gem です。\n下記では red_amber を用いて、より実践的な 表作成用 Ruby コードセルを示します。\n\nrequire 'terminal-table'\nrequire 'red_amber'\ninclude RedAmber\nuri = URI('https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/starwars.csv')\nstarwars = DataFrame.load(uri)\ntable = Terminal::Table.new do |t|\n  t.headings = starwars.keys.map { |x| x.to_s }\n  t.rows = starwars.head.to_a\n  t.style = { :border_top =&gt; false, :border_bottom =&gt; false }\nend\ntable.style = { :border =&gt; :markdown}\n\nIRuby.convert(table.render, mime: \"text/markdown\")\n\n\n\n表 2: StarWars table for 日本\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nunnamed1\nname\nheight\nmass\nhair_color\nskin_color\neye_color\nbirth_year\nsex\ngender\nhomeworld\nspecies\n\n\n\n\n1\nLuke Skywalker\n172\n77.0\nblond\nfair\nblue\n19.0\nmale\nmasculine\nTatooine\nHuman\n\n\n2\nC-3PO\n167\n75.0\nNA\ngold\nyellow\n112.0\nnone\nmasculine\nTatooine\nDroid\n\n\n3\nR2-D2\n96\n32.0\nNA\nwhite, blue\nred\n33.0\nnone\nmasculine\nNaboo\nDroid\n\n\n4\nDarth Vader\n202\n136.0\nnone\nwhite\nyellow\n41.9\nmale\nmasculine\nTatooine\nHuman\n\n\n5\nLeia Organa\n150\n49.0\nbrown\nlight\nbrown\n19.0\nfemale\nfeminine\nAlderaan\nHuman\n\n\n\n\n\n\nでは [表 @tbl-starwars] によってクロスリファレンスを得てみましょう。\nスターウォーズの研究は 表 2 を参照。\nいかがでしょうか？ この ipynb を quarto render した結果得られる PDF 等では [表 @tbl-starwars] がクロスリファレンスに置き換えられているはずです。"
  },
  {
    "objectID": "ipynb2pdforword.html",
    "href": "ipynb2pdforword.html",
    "title": "ipynb から Word や PDF のファイルを生成する",
    "section": "",
    "text": "このページでは iruby notebook の ipynb ファイルから Word や PDF のファイルを (Quarto を用いることで) 生成する方法を説明します。\nこの変換は論文作成やレポート提出などに役立ちます。\n\n\nまず Quarto への入力を想定する ipynb にはその冒頭に、タイプを Raw に設定したセルを追加する必要があります(下記画像参照)。\n\n\n\nYAML front matter\n\n\n「Jupyter のセルのタイプを Raw に切り替える」のは、 下記画像のように「ノートブックタブ下のアイコン群の最も右にあるプルダウンメニュー」から行うことができます。\n\n\n\nSwitching cell type to Raw\n\n\nここでは日本語を含む ipynb を PDF として問題無く出力するための設定を「主に」記述しています。\nその「主に」以外のオプションとしては toc: true と number-sections: true をここでは含めています。\ntoc: true は Markdown の header のレベルに応じた目次を自動生成します。\nnumber-sections: true は section に自動で数字インデックスを付与します。 この他にも様々なオプションがあります。\npdf: 用のオプションであれば https://quarto.org/docs/output-formats/pdf-basics.html をご覧ください。\n\n\n\nまずは何はなくとも Ruby コードセルの作成とその実行結果を ipynb 中に作ってみましょう。\n\nputs \"Hello るびー！\"\n\nHello るびー！\n\n\n日本語を含む文字列のプリントを行う Ruby コードのセルが問題無く実行され、その出力がノートブック中に埋め込まれています。\n\n\n\nそれでは上記のようにコードセルとその実行結果を含む ipynb から PDF を出力してみましょう。\n実は JupyterLab には PDF への export 機能があるのですが、その機能では日本語は出力されない難があります。\nまた前述の YAML Front Matter 中のオプションのような詳細な設定は行えません。\nQuarto を用いるとそのような難は無く、ipynb から PDF を出力することが可能です。 その手順は下記になります。\n\nJupyterLab のメニューバー -&gt; File -&gt; New -&gt; Terminal と辿り、Terminal を立ち上げまず。\n次のコマンドを実行します。 quarto render ipynb2pdforword.ipynb\nJupyterLab の左のサイドバーの file browser をリフレッシュします。\nipynb2pdforword.pdf ができているはずです。それをダブルクリックしてみてください。\n\n\n\n\nここでは、Quarto が「クロスリファレンス(科学技術出版で必須となるもの)の作成を容易にしてくれること」の入門編として 数式を使ってみます。\n数式のレンダリングは Jupyter 中の Markdown セルで標準でサポートされています。\n下記を iruby notebook の Markdown セル中に書き実行してみましょう。\n## 数式セクション {#sec-equation}\n\n$$\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n$$ {#eq-stddev}\n上記で行っていることは セクションへのラベリングと数式へのラベリングです。 {#sec-XXX} がセクションへのラベリングになります。XXXは任意の名前になります。\n同様に{#eq-YYY} は数式へのラベリングになります。\nこのようにセクションや数式にラベリングを行った上で、@sec-XXX のように @ の後にラベルをつけた文字列を Markdown セルに記述すると、 Quarto は ipynb から出力する PDF や Word ファイルにセクションや数式へのクロスリファレンスを自動生成してくれます。\n\n\n\n\\[\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n\\tag{1}\\]\nSection 1.5 の Equation 1 を見てください。\n上記の文の PDF 出力はどうなっているでしょうか？\n「第何セクション」の「第何番目の数式」か、が自動的に参照付けされているはずです。\nこれが科学技術出版やレポート等で非常に重要となるクロスリファレンスと呼ばれるものになります。"
  },
  {
    "objectID": "ipynb2pdforword.html#yaml-front-matter",
    "href": "ipynb2pdforword.html#yaml-front-matter",
    "title": "ipynb から Word や PDF のファイルを生成する",
    "section": "",
    "text": "まず Quarto への入力を想定する ipynb にはその冒頭に、タイプを Raw に設定したセルを追加する必要があります(下記画像参照)。\n\n\n\nYAML front matter\n\n\n「Jupyter のセルのタイプを Raw に切り替える」のは、 下記画像のように「ノートブックタブ下のアイコン群の最も右にあるプルダウンメニュー」から行うことができます。\n\n\n\nSwitching cell type to Raw\n\n\nここでは日本語を含む ipynb を PDF として問題無く出力するための設定を「主に」記述しています。\nその「主に」以外のオプションとしては toc: true と number-sections: true をここでは含めています。\ntoc: true は Markdown の header のレベルに応じた目次を自動生成します。\nnumber-sections: true は section に自動で数字インデックスを付与します。 この他にも様々なオプションがあります。\npdf: 用のオプションであれば https://quarto.org/docs/output-formats/pdf-basics.html をご覧ください。"
  },
  {
    "objectID": "ipynb2pdforword.html#ruby-コードセルとその出力",
    "href": "ipynb2pdforword.html#ruby-コードセルとその出力",
    "title": "ipynb から Word や PDF のファイルを生成する",
    "section": "",
    "text": "まずは何はなくとも Ruby コードセルの作成とその実行結果を ipynb 中に作ってみましょう。\n\nputs \"Hello るびー！\"\n\nHello るびー！\n\n\n日本語を含む文字列のプリントを行う Ruby コードのセルが問題無く実行され、その出力がノートブック中に埋め込まれています。"
  },
  {
    "objectID": "ipynb2pdforword.html#ipynb-から-pdf-を出力する",
    "href": "ipynb2pdforword.html#ipynb-から-pdf-を出力する",
    "title": "ipynb から Word や PDF のファイルを生成する",
    "section": "",
    "text": "それでは上記のようにコードセルとその実行結果を含む ipynb から PDF を出力してみましょう。\n実は JupyterLab には PDF への export 機能があるのですが、その機能では日本語は出力されない難があります。\nまた前述の YAML Front Matter 中のオプションのような詳細な設定は行えません。\nQuarto を用いるとそのような難は無く、ipynb から PDF を出力することが可能です。 その手順は下記になります。\n\nJupyterLab のメニューバー -&gt; File -&gt; New -&gt; Terminal と辿り、Terminal を立ち上げまず。\n次のコマンドを実行します。 quarto render ipynb2pdforword.ipynb\nJupyterLab の左のサイドバーの file browser をリフレッシュします。\nipynb2pdforword.pdf ができているはずです。それをダブルクリックしてみてください。"
  },
  {
    "objectID": "ipynb2pdforword.html#数式とその式へのクロスリファレンス",
    "href": "ipynb2pdforword.html#数式とその式へのクロスリファレンス",
    "title": "ipynb から Word や PDF のファイルを生成する",
    "section": "",
    "text": "ここでは、Quarto が「クロスリファレンス(科学技術出版で必須となるもの)の作成を容易にしてくれること」の入門編として 数式を使ってみます。\n数式のレンダリングは Jupyter 中の Markdown セルで標準でサポートされています。\n下記を iruby notebook の Markdown セル中に書き実行してみましょう。\n## 数式セクション {#sec-equation}\n\n$$\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n$$ {#eq-stddev}\n上記で行っていることは セクションへのラベリングと数式へのラベリングです。 {#sec-XXX} がセクションへのラベリングになります。XXXは任意の名前になります。\n同様に{#eq-YYY} は数式へのラベリングになります。\nこのようにセクションや数式にラベリングを行った上で、@sec-XXX のように @ の後にラベルをつけた文字列を Markdown セルに記述すると、 Quarto は ipynb から出力する PDF や Word ファイルにセクションや数式へのクロスリファレンスを自動生成してくれます。"
  },
  {
    "objectID": "ipynb2pdforword.html#sec-equation",
    "href": "ipynb2pdforword.html#sec-equation",
    "title": "ipynb から Word や PDF のファイルを生成する",
    "section": "",
    "text": "\\[\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n\\tag{1}\\]\nSection 1.5 の Equation 1 を見てください。\n上記の文の PDF 出力はどうなっているでしょうか？\n「第何セクション」の「第何番目の数式」か、が自動的に参照付けされているはずです。\nこれが科学技術出版やレポート等で非常に重要となるクロスリファレンスと呼ばれるものになります。"
  }
]